;
; pyxll.cfg
;
; This is an example config file which you should customize.
;
; The example config below assumed the 'examples' folder is present
; in the same folder as this config file.
;
; The sections in this file are:
;
;   PYTHON  - Python related settings (location of Python, Python path etc)
;   PYXLL   - PyXLL add-in related settings (modules to load and other settings)
;   LOG     - Logging settings (where to log to and what to log)
;   LICENSE - License key
;
; For more information see https://www.pyxll.com.

[PYTHON]

;executable:
;
;  The Python executable file that will be set as sys.executable.
;  It is used to determine which Python runtime to load when PyXLL starts if pythonhome and dll are not set.
;  The version of the Python executable used must match the version of Python PyXLL was built for.
;  May also be set via the environment variable PYXLL_PYTHON_EXECUTABLE.
;
executable = d:\program\python38\pythonw.exe


;pythonpath:
;
;  A list of paths Python will use when importing modules.
;  Multiple paths can be listed either as a semi-colon delimited list or across multiple indented lines.
;  Paths may be absolute paths or relative to this file.
;
pythonpath =
	./examples

;pythonhome:
;
;  This doesn't need to be set as it is usually inferred from the Python executable.
;  The Python home directory is used to determine the location of the Python standard libraries.
;  If set then PyXLL will look in this folder for the Python dll if neither executable or dll are set.
;  May also be set via the environment variable PYXLL_PYTHONHOME.
;
;pythonhome = c:/Python_XX

;dll:
;
;  This doesn't need to be set as it is usually inferred from the Python executable.
;  The Python dynamic link library (dll) that will be loaded to run the Python interpreter.
;  Usually this is inferred from the system default Python, executable or pythonhome.
;  The version of the Python dll used must match the version of Python PyXLL was built for.
;  May also be set via the environment variable PYXLL_PYTHON_DLL.
;
;dll = c:/Python_XX/pythonXX.dll

;sys.flags:
;
;  The following options can be used to set the corresponding sys.flags options.
;  See the Python docs for more information about each flag.
;
;  Both 'ignore_environment' and 'inspect' are set by default.
;  All other flags are disabled by default.
;
;  'ignore_environment' tells Python to ignore any Python environment variables while initializing
;   (eg PYTHONPATH and PYTHONHOME). This is advised as it prevents any unwanted global config from
;   interfering with how Python is configured in this file.
;
;  'inspect' is set to prevent uncaught SystemExit exceptions from causing the Excel process
;   to be terminated.
;
;ignore_environment = 1
;inspect = 1
;optimize = 0
;debug = 0
;verbose = 0
;dont_write_bytecode = 0
;no_user_site = 0
;no_site = 0


[PYXLL]

;modules:
;
;  List of modules that PyXLL will load when starting.
;  Any code that is to be exposed to Excel should be added to this list, or imported from modules in this list.
;  Multiple modules can be listed either as a comma delimited list or across multiple indented lines.
;
modules =
	misc
	worksheetfuncs
	arrayfunctions
	pandas_example
	customtypes
	asyncfunc
	menus
	automation
	callbacks
	objectcache
	real_time_data
	custom_task_panes
	plotting
	ribbon

; error_handler:
;
; When a UDF raises an Exception the error handler is called to convert the error
; to something more user-friendly.
; Error handlers take 3 arguments, (exc_type, exc_value, exc_traceback).
; If there is no error handler the Exceptions are converted to Excel errors
; (e.g. #N/A, #NUM, etc).
;
error_handler = pyxll.error_handler

;ribbon:
;
;  If set, the ribbon setting should be the file name (or list of filenames) of custom
;  ribbon user interface XML.
;
;  Multiple ribbon files can be specified and they will be merged together.
;  The attributes 'before' and 'after' on the 'tab' and 'group' elements can be
;  used to control where tabs and groups are placed in the merged xml document.
;
;  The file names may absolute paths or relative to the config file.
;  Modules used in the ribbon xml file must be on the Python path (configured above).
;
ribbon =
    ./examples/ribbon/ribbon.xml
    ./examples/custom_task_panes/ribbon.xml

;external_config:
;
;  This setting may be used to reference another config file (or files) located elsewhere.
;  For example, if you want to have the main pyxll.cfg installed on users' local PCs but want to
;  control the configuration via a shared file on the network you can use this to reference that
;  external config file. URLs may be used as well as paths.
;
;  Values in external config files override what's in the parent config file, apart from pythonpath,
;  modules and external_config which get appended to.
;
;  In addition to setting this in the config file, the environment variable PYXLL_EXTERNAL_CONFIG_FILE
;  can be used. Any external configs set by this environment variable will be added to those specified
;  in the config.
;
;  Multiple config files can be specified, and file patterns may be used.
;
;external_config =

;startup_script:
;
;  Path or URL of a batch (.bat) or Powershell (.ps1) script to run when Excel starts.
;
;  This script will be run when Excel starts, but before Python is initialized. This is so that
;  the script can install anything required by the add-in on demand when Excel runs.
;
;  The script can run various commands, such as setting config values. See the PyXLL user
;  guide for more information.
;
;startup_script =

;developer_mode:
;
;  When the developer mode is active a PyXLL menu with a Reload menu item will be added to
;  the Add-Ins toolbar in Excel.
;  If the developer mode is inactive then no menu items will be automatically created so the
;  only ones visible will be the ones declared in the imported user modules.
;
developer_mode = 1

;auto_reload:
;
;  When set PyXLL will detect when any Python modules or ribbon files have been modified
;  and automatically trigger a reload.
;
;auto_reload = 0

;auto_rebind:
;
;  When set PyXLL will update automatically whenever any new worksheet functions, macros
;  or menus are registered. This can be useful when using an interactive Python prompt
;  connected to Excel as it avoids the need to call 'pyxll.rebind' after each change.
;
;  auto_rebind is enabled by default.
;
;auto_rebind = 1

;deep_reload:
;
;  When set PyXLL will attempt to reload all modules and their dependencies when reloading.
;  When not set, only the modules listed above will be reloaded.
;
;  deep_reload is enabled by default.
;
;deep_reload = 1

;deep_reload_include, deep_reload_exclude:
;
;  Lists of modules or packages to include or exclude when doing deep reloading.
;  Not all packages can be reloaded cleanly and so cause problems when deep reloading.
;  Limiting the packages to be included when deep reloading can also improve reload time.
;
;deep_reload_include =
;deep_reload_exclude =

;deep_reload_include_site_packages:
;
;  When deep_reload is set, any modules inside site-packages will be ignored
;  unless this option is enabled.
;
;deep_reload_include_site_packages = 0

;deep_reload_disable:
;
;  Completely disable to deep reloading import hook.
;  This can be used if a package cannot be imported when deep reloading is enabled.
;  If you find you need to use this setting, please report it to PyXLL support.
;
;deep_reload_disable = 0

;error_cache_size:
;
;  If a worksheet function raises an exception it is cached for retrieval via the
;  get_last_error function. This setting sets the maximum number of exceptions that
;  will be cached.
;
;error_cache_size = 500

;allow_abort:
;
;  Default value for allow_abort keyword argument to @xl_func decorator.
;  Use with caution as this enables a Python trace callback which will degrade performance.
;
;allow_abort = 0

;abort_throttle_time, abort_throttle_count:
;
;  When a UDF has been registered as abort-able, a trace function is used that gets called
;  frequently as the Python code is run by the Python interpreter.
;  To reduce the impact of the trace function Excel can be queried less often to see if the
;  user has aborted the function.
;  abort_throttle_time is the minimum time in seconds between checking Excel for the abort status.
;  abort_throttle_count is the minimum number of calls to the trace function between checking Excel
;  for the abort status.
;
;abort_throttle_time = 0.2
;abort_throttle_count = 1000

;auto_resize_arrays:
;
;  Default value for auto_resize keyword argument to @xl_func decorator.
;
;auto_resize_arrays = 0

;quiet:
;
;  Stop PyXLL from showing any message boxes and instead only write errors to the log file.
;  This prevents a message box from being shown even if PyXLL can't load.
;
;quiet = 0

;always_use_2d_arrays:
;
;  Proir to PyXLL 4, types ending in '[]' were 2d arrays, or lists of lists. Since 4.0,
;  '[]' types are 1d arrays and '[][]' is used for 2d arrays. If set, this setting forces
;  all array types to be 2d arrays for backwards compatibility with versions prior to 4.0.
;
;always_use_2d_arrays = 0

;get_cached_object_id:
;
;  When complex object types are returned to Excel that can't be represented as Excel values
;  they are inserted into an object cache and an id for the cached object is displayed in
;  Excel. This id should be unique as it's used when passing these objects to other functions,
;  which retrieves them from the cache by the id.
;  This setting can be used to override the default id behaviour with a custom function.
;
;get_cached_object_id = module.get_cached_object_id

;clear_object_cache_on_reload:
;
;  When reloading PyXLL, by default the object cache is cleared and the numbering
;  used by the default object id naming scheme is reset.
;  This can be disabled by setting this option to 0.
;
;clear_object_cache_on_reload = 1

;pandas_treat_errors_as_nan:
;
;  If set (the default state) then the Pandas type converters will convert any errors
;  (e.g. #N/A or #NUM!) to NaN when constructing a Pandas DataFrame or Series.
;  If unset then the 'var' type converter is used and errors will be passed as
;  Exception instances (eg RuntimeError).
;
;pandas_treat_errors_as_nan = 1

;win32com_gen_path:
;
;  This set the win32com.__gen_path__ path used for win32com's generated wrapper classes.
;  By default win32com uses the user's Temp folder, but this is shared between all
;  Python sessions, not just PyXLL. If this becomes corrupted or updated by an
;  external Python script then it can stop the win32com package from functioning
;  correctly, and setting it to a folder specifically for PyXLL can avoid that problem.
;
;win32com_gen_path = ./gen_py

;win32com_delete_gen_path:
;;
;  If set, delete the win32com.__gen_path__ folder used for generated wrapper classes
;  when PyXLL starts. If you have also set 'win32com_gen_path', that is the folder that
;  will be deleted. Care should be taken to ensure that there is nothing in the folder
;  you do not want to be deleted before setting this option.
;
;win32com_delete_gen_path = 0

;win32com_no_dynamic_dispatch:
;
;  When returning a COM object using the win32com package, PyXLL will attempt to use a
;  static wrapper generated by win32com. If that fails and this setting is not set
;  then it will fallback to using a dynamic dispatch wrapper.
;  Dynamic wrappers are suitable in most cases and behave in the same way as the
;  static wrappers, but the win32com.client.constants set of constants only contains
;  constants included by static wrappers, and so falling back to dynamic dispatch
;  can result in missing constants.
;
;win32com_no_dynamic_dispatch = 0

;recalc_cached_objects_on_open:
;
;  Recalculate cells containing cached objects when the workbook is opened.
;
;  This setting adds cells containing cached objects to the XML metadata which
;  is added to the workbook when saving, and when the workbook is re-opened
;  those cells will be marked as 'dirty' so Excel will recalculate them.
;
;recalc_cached_objects_on_open = 0

;recalc_rtd_on_open
;
;  Recalculate cells containing RTD function when the workbook is opened.
;
;  This setting includes cells containing RTD functions to the XML metadata which
;  is added to the workbook when saving, and when the workbook is re-opened
;  those cells will be marked as 'dirty' so Excel will recalculate them.
;
;recalc_rtd_on_open = 0

;disable_recalc_on_open:
;
;  Don't recalulate any cells marked as needing recalculating in the XML
;  metadata when the workbook is opened.
;
;disable_recalc_on_open = 0

;metadata_custom_xml_namespace:
;
;  Use a custom namespace for the XML metadata added to the workbook when
;  saving. The metadata is added when there are cells that need to be
;  recalculated when the workbook opens.
;
;  By default, the name of the add-in is used to construct the namespace
;  so as not to conflict with metadata added by other add-ins.
;
;metadata_custom_xml_namespace = urn:pyxll:metadata

;disable_saving_metadata:
;
;  Disable writing the custom XML metadata when saving the workbook.
;
;  With this disabled, none of the recalc on open features will update
;  the workbook with cells that need to be recalculated and so they
;  will not recalculate on opening the workbook.
;
;  Metadata already saved to a workbook will not be affected and so
;  cells marked as needed to be recalculated and saved previously
;  will remain and will still be recalculated.
;
;disable_saving_metadata = 0

;ignore_entry_points:
;
;  Ignore any setuptools entry points when loading or reloading PyXLL.
;
;  Packages can use setuptools entry points to add modules and ribbon
;  toolbars to be added to PyXLL without them needing to be explicitly
;  listed in the pyxll.cfg config file. When this setting is enabled
;  those entry points will be disabled.
;
;ignore_entry_points = 0

[LOG]

;verbosity:
;
;  Detail of logging to include. May be set to any of:
;    debug (most verbose level, show all log messages including debugging messages)
;    info
;    warning
;    error
;    critical (least verbose level, only show the most critical errors)
;
verbosity = info

;format:
;
;  Log format as used by the standard Python logging package.
;
format = %(asctime)s - %(levelname)s : %(message)s

;path:
;
;  Path to write log files to.
;  This may be relative to this config file.
;
path = ./logs

;file:
;
;  Filename of the log file.
;  This may include the additional substitution variables:
;    date (current date in YYYYMMDD format)
;    pid (process id)
;    xlversion (xl version)
;
file = pyxll.%(date)s.log

;encoding:
;
;  Text encoding to be used when writing the log file.
;
encoding = utf-8


[LICENSE]

;key:
;
;  License key as provided when purchasing PyXLL.
;
;key = your license key here

;file:
;
;  Path or URL of a plain text file containing the PyXLL license key.
;  This can be useful when sharing a group license key in a group.
;  The file may include comment lines starting with '#'.
;
;file = path or URL the license file